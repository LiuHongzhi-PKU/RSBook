最近最热门推荐算法（recentPopular.py）
数据集：movie-lens 100k
#precisioin=0.1567	recall=0.0489	coverage=0.0434

基于时间的项目协同过滤（itemCF_TopN_Time.py)
数据集：movie-lens 100k
# precisioin=0.1700	recall=0.0530	coverage=0.0933

基于时间的用户协同过滤（userCF_TopN_Time.py)
数据集：movie-lens 100k
# precisioin=0.1856	recall=0.0579	coverage=0.1546

基于会话的协同过滤（itemCF_session.py)
数据集：movie-lens 100k
# precisioin=0.06994460	recall=0.08636908	coverage=0.21165279


基于会话的扩散(sessionSpreading.py)
数据集：movie-lens 100k
# precisioin=0.05595568	recall=0.06909526	coverage=0.04280618


基于统一转移矩阵的序列预测(Markov.py)
数据集data/trans.txt
precisioin=0.2830	recall=0.6011	coverage=0.1178

基于个性化转移矩阵的序列预测(FPMC.py)
数据集data/trans.txt
# precisioin=0.2654	recall=0.5638	coverage=0.2407


基于循环神经网络的序列预测（RNN.py）
数据集：data/sample
# GRU
# Recall= 65.65656565656566
# MMR= 41.3641641582818
# LSTM
# Recall= 69.6969696969697
# MMR= 50.16093412378242
# RNN
# Recall= 61.61616161616161
# MMR= 34.969667389453484
修改37行函数名字即可


基于空间信息的推荐：预过滤（LBSpre.py）
数据集：data/poidata/Foursquare/mydata.txt
# 距离 50000
# precisioin=0.0082	recall=0.0431	coverage=0.8095


后过滤 （LBSpost.py）
数据集：data/poidata/Foursquare/mydata.txt
# 距离 1000
precisioin=0.0074	recall=0.0388	coverage=0.8071

情景化建模 （LBSmodel.py）
precisioin=0.0082	recall=0.0431	coverage=0.8048